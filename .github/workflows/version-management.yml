name: Automatic Version Management

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: read
  pull-requests: write

jobs:
  version-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release dependencies
      run: |
        npm install --no-save \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/exec

    - name: Update VERSION file, create release, and deploy to template
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEPLOY_TOKEN: ${{ secrets.PAT_TOKEN || secrets.PERSONAL_ACCESS_TOKEN || secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        cat > .releaserc.json <<'RC'
        {
          "branches": ["main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/exec",
              {
                "prepareCmd": "echo '{\"version\": \"v${nextRelease.version}\", \"commit\": \"'$GITHUB_SHA'\", \"build_date\": \"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\", \"build_type\": \"production\"}' > VERSION",
                "publishCmd": "./deploy-template-after-release.sh"
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["VERSION"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            "@semantic-release/github"
          ]
        }
        RC
        
        # Create deployment script that runs after release
        cat > deploy-template-after-release.sh << 'DEPLOY'
        #!/bin/bash
        set -euo pipefail
        
        echo "ðŸš€ Deploying DevOps v$(jq -r .version VERSION) to template repository..."
        
        git clone https://x-access-token:$DEPLOY_TOKEN@github.com/vanman2024/multi-agent-claude-code.git template-repo
        cd template-repo
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        BRANCH_NAME="auto-deploy/devops-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        # Remove and recreate devops directory
        rm -rf devops
        mkdir -p devops
        
        # Copy DevOps system (excluding development files)
        rsync -a --delete \
          --exclude '.git/' \
          --exclude '.github/' \
          --exclude 'deploy-to-template.sh' \
          --exclude 'deploy-template-after-release.sh' \
          --exclude 'tests/' \
          --exclude 'venv/' \
          --exclude '__pycache__/' \
          --exclude '*.pyc' \
          --exclude '*.pyo' \
          --exclude '.pytest_cache/' \
          ../ devops/
        
        # Copy VERSION file
        cp ../VERSION devops/VERSION
        
        # Check if there are changes to deploy
        if git diff --quiet && git diff --cached --quiet; then
          echo "No changes to deploy"
          exit 0
        fi
        
        # Add and commit changes
        git add devops/
        VERSION_NUM=$(jq -r .version ../VERSION)
        git commit -m "feat: auto-update devops to ${VERSION_NUM}
        
        Automated deployment from vanman2024/devops
        Source commit: $GITHUB_SHA"
        
        # Push and create PR
        git push origin "$BRANCH_NAME"
        gh pr create \
          --title "Auto-update DevOps ${VERSION_NUM}" \
          --body "Automated deployment of DevOps tooling from vanman2024/devops
        
        Version: ${VERSION_NUM}
        Source commit: $GITHUB_SHA
        
        This PR was created automatically by the version management workflow." \
          --base main \
          --head "$BRANCH_NAME"
        
        echo "âœ… Successfully deployed DevOps ${VERSION_NUM} to template repository"
        DEPLOY
        
        chmod +x deploy-template-after-release.sh
        npx semantic-release
