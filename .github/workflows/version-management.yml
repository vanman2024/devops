name: Automatic Version Management

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: read
  pull-requests: write

jobs:
  version-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release dependencies
      run: |
        npm install --no-save \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/exec

    - name: Update VERSION file and create release
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create semantic-release config
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/exec",
              {
                "prepareCmd": "echo '{\"version\": \"v${nextRelease.version}\", \"commit\": \"'$GITHUB_SHA'\", \"build_date\": \"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\", \"build_type\": \"production\"}' > VERSION"
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["VERSION"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            "@semantic-release/github"
          ]
        }
        EOF
        
        # Run semantic-release
        npx semantic-release

    - name: Sync DevOps to template repository
      if: always()
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        # Get the current version from VERSION file
        DEVOPS_VERSION=""
        if [[ -f "VERSION" && -s "VERSION" ]]; then
          DEVOPS_VERSION=$(cat VERSION | jq -r '.version // empty' 2>/dev/null || true)
        fi
        
        # Fallback to latest git tag if VERSION file doesn't exist or is empty
        if [[ -z "$DEVOPS_VERSION" ]]; then
          DEVOPS_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.8.0")
        fi
        
        echo "ðŸš€ Syncing DevOps $DEVOPS_VERSION to template..."
        
        # Clone template repository
        git clone https://oauth2:${PAT_TOKEN}@github.com/vanman2024/multi-agent-claude-code /tmp/template
        cd /tmp/template
        
        # Configure git
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        
        # Remove existing devops directory
        rm -rf devops/*
        
        # Copy DevOps files with same exclusions as AgentSwarm
        rsync -a \
          --exclude 'tests/' \
          --exclude 'tests/**' \
          --exclude '*.toml' \
          --exclude '__pycache__/' \
          --exclude '.pytest_cache/' \
          --exclude '.git/' \
          --exclude '.github/' \
          --exclude '*.pyc' \
          --exclude '*.pyo' \
          --exclude 'deploy-to-template.sh' \
          --exclude 'scripts/intelligent-auto-deploy.sh' \
          --exclude 'node_modules/' \
          --exclude 'config/' \
          --exclude 'docs/' \
          --exclude 'specs/' \
          --exclude '.releaserc.json' \
          --exclude '.gitmessage' \
          --exclude 'AGENTS.md' \
          --exclude 'pytest.ini' \
          --exclude 'package.json' \
          --exclude 'package-lock.json' \
          --exclude '.npmrc' \
          --exclude '.env*' \
          --exclude 'venv/' \
          --exclude '.venv/' \
          $GITHUB_WORKSPACE/ devops/
        
        # Update template VERSION file with new component version
        echo "ðŸ“‹ Updating template VERSION file with devops $DEVOPS_VERSION..."
        node -e "
          const fs = require('fs');
          const versionFile = 'VERSION';
          let versionData = {};
          
          if (fs.existsSync(versionFile)) {
            versionData = JSON.parse(fs.readFileSync(versionFile, 'utf8'));
          }
          
          if (!versionData.components) {
            versionData.components = {};
          }
          
          versionData.components['devops'] = '$DEVOPS_VERSION';
          
          fs.writeFileSync(versionFile, JSON.stringify(versionData, null, 2) + '\n');
          console.log('âœ… Updated template VERSION with devops: $DEVOPS_VERSION');
        "
        
        # Commit and push changes
        git add devops/ VERSION
        if git diff --staged --quiet; then
          echo "âœ… No changes to sync"
        else
          git commit -m "chore: sync devops to $DEVOPS_VERSION

          Automated sync of DevOps component from vanman2024/devops.

          ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
          echo "âœ… DevOps synced to template successfully"
        fi

    - name: DevOps version management complete
      if: always()
      run: |
        echo "âœ… DevOps version management workflow completed"
        echo "ðŸ“¦ DevOps version: $(cat VERSION | jq -r .version 2>/dev/null || echo 'unknown')"
        echo "ðŸš€ Template sync request sent to multi-agent-claude-code"
