name: Automatic Version Management

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: read
  pull-requests: write

jobs:
  version-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release dependencies
      run: |
        npm install --no-save \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/exec

    - name: Update VERSION file and create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create semantic-release config
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/exec",
              {
                "prepareCmd": "echo '{\"version\": \"v${nextRelease.version}\", \"commit\": \"'$GITHUB_SHA'\", \"build_date\": \"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'\", \"build_type\": \"production\"}' > VERSION"
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["VERSION"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            "@semantic-release/github"
          ]
        }
        EOF
        
        # Run semantic-release
        npx semantic-release

    - name: Deploy to template repository
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.PERSONAL_ACCESS_TOKEN || secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        # Clone the template repository with authentication
        git clone https://x-access-token:$GITHUB_TOKEN@github.com/vanman2024/multi-agent-claude-code.git template-repo
        cd template-repo
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create a new branch for this deployment
        BRANCH_NAME="auto-deploy/devops-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME
        
        # Copy DevOps components to template repo (production files only)
        rm -rf devops/ 2>/dev/null || true
        mkdir -p devops/
        
        # Copy production code and configs (no tests, no deployment scripts)
        cp -r ../ops devops/ 2>/dev/null || true
        cp -r ../deploy devops/ 2>/dev/null || true  
        cp -r ../ci devops/ 2>/dev/null || true
        cp ../pyproject.toml devops/ 2>/dev/null || true
        cp ../README.md devops/ 2>/dev/null || true
        
        # CRITICAL: Update VERSION file to match source repo
        cp ../VERSION devops/VERSION
        # Also create the legacy devops-VERSION file
        cp ../VERSION devops-VERSION
        
        # Check if there are any changes
        if git diff --quiet && git diff --cached --quiet; then
          echo "No changes to deploy"
          exit 0
        fi
        
        # Commit and push changes
        git add -A
        git commit -m "feat: Auto-deploy DevOps components $(cat ../VERSION | jq -r .version)

        Auto-deployment from vanman2024/devops
        Commit: $GITHUB_SHA
        Build date: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        git push origin $BRANCH_NAME
        
        # Create pull request using GitHub CLI
        PR_URL=$(gh pr create \
          --title "Auto-deploy DevOps $(cat ../VERSION | jq -r .version)" \
          --body "Automated deployment of DevOps components from vanman2024/devops
        
        ## Changes
        - Updated DevOps automation tools
        - Version: $(cat ../VERSION | jq -r .version)
        - Source commit: $GITHUB_SHA
        
        This PR was automatically created by the DevOps repository's semantic versioning workflow." \
          --base main \
          --head $BRANCH_NAME)
        
        # Auto-merge the PR
        gh pr merge $PR_URL --squash --delete-branch
        echo "âœ… Auto-merged PR: $PR_URL"

